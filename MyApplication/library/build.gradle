apply plugin: 'com.android.library'
// 应用插件maven
apply plugin: 'maven'
android {
    compileSdkVersion 25
    buildToolsVersion "25.0.0"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.0.1'
    testCompile 'junit:junit:4.10'
}

ext{
    UPDATE_URL="TEST"
}

task defPrint << {
    printf(ext.UPDATE_URL)
}

// 打包Jar
/**
 *
 * @param target jar 文件名
 * @param classDir class 文件所在的目录
 * <pre>
 参考: http://blog.csdn.net/xia7139/article/details/51010594
 jar
 用法: jar {ctxui}[vfmn0PMe] [jar-file] [manifest-file] [entry-point] [-C dir] files ...
 选项:
 -c  创建新档案
 -t  列出档案目录
 -x  从档案中提取指定的 (或所有) 文件
 -u  更新现有档案
 -v  在标准输出中生成详细输出
 -f  指定档案文件名
 -m  包含指定清单文件中的清单信息
 -n  创建新档案后执行 Pack200 规范化
 -e  为捆绑到可执行 jar 文件的独立应用程序指定应用程序入口点
 -0  仅存储; 不使用任何 ZIP 压缩
 -P  保留文件名中的前导 '/' (绝对路径) 和 ".." (父目录) 组件
 -M  不创建条目的清单文件
 -i  为指定的 jar 文件生成索引信息
 -C  更改为指定的目录并包含以下文件
 如果任何文件为目录, 则对其进行递归处理。
 清单文件名, 档案文件名和入口点名称的指定顺序与 'm', 'f' 和 'e' 标记的指定顺序相同。

 示例 1: 将两个类文件归档到一个名为 classes.jar 的档案中:
 jar cvf classes.jar Foo.class Bar.class
 示例 2: 使用现有的清单文件 'mymanifest' 并将 foo/ 目录中的所有文件归档到 'classes.jar' 中:
 jar cvfm classes.jar mymanifest -C foo/

 摘自<jar命令的帮助文档>
 使用 jar -cvf lib.jar -C ./build/intermediates/classes .
 * </pre>
 */
def makeJar(String target, String classDir){
    exec{
        executable "jar" // 调用jar 命令
        args "-cvf", target
        args "-C", classDir
        args "", "."
    }
}

task buildJarLib(dependsOn:['build'])<<{
    makeJar("lib.jar", "./build/intermediates/classes")
}

// 添加上傳任务
uploadArchives {
    repositories {
//        mavenDeployer {
//            repository(url: "file://localhost/" + System.getenv("ANDROID_HOME")
//                    + "/extras/android/m2repository/")
//            pom.version = '1.0'
//            pom.groupId = 'com.example.library'
//            pom.artifactId = 'library'
//        }

        mavenDeployer {
            repository (url: "file://localhost/d:/.m2/myRepo/")
            pom.version='1.0'
            pom.groupId='com.example.library'
            pom.artifactId='lib'
        }


        // 生成路径规则 项目名称/Module名称/unspecified/
        // 默认使用的是ivy声明
//        mavenLocal()
    }
}
