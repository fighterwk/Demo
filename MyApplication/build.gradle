// Top-level build file where you can add configuration options common to all sub-projects/modules.
println "project:build.gradle"
buildscript {
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.3'

//        classpath 'com.novoda:bintray-release:0.8.0'

        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.0'
        classpath 'com.github.dcendents:android-maven-plugin:1.2'


        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }

    repositories {
        jcenter()

        maven { url 'https://jitpack.io' }
        maven {
            url 'https://maven.google.com/'
            name 'Google'
        }
    }
}

allprojects {
    repositories {
        maven {
            url "d:/.m2/myRepo/"
        }
        jcenter()
        maven {
            url 'https://maven.google.com/'
            name 'Google'
        }
    }
}



ext {
    minSdkVersion = 11
    compileSdkVersion = 25
    targetSdkVersion = compileSdkVersion
    buildToolsVersion = '25.0.2'

    rxJava = 'io.reactivex:rxjava:1.2.9'
    supportLibraryVersion = '25.2.0'
    appCompat = "com.android.support:appcompat-v7:$supportLibraryVersion"
    supportAnnotations = "com.android.support:support-annotations:$supportLibraryVersion"
    junit = 'junit:junit:4.12'
    mockito = 'org.mockito:mockito-core:1.10.19'

    robolectricVersion = '3.1.4'
    robolectric = "org.robolectric:robolectric:$robolectricVersion"
    robolectricShadowsSupport = "org.robolectric:shadows-support-v4:$robolectricVersion"
    // Workaround for https://github.com/robolectric/robolectric/issues/1932
    khronosOpenGLApi = "org.khronos:opengl-api:gl1.1-android-2.1_r1"


}

//task clean(type: Delete) {
//    delete rootProject.buildDir
//}

// 读取配置文件信息
def init() {
    Properties properties = new Properties()
    File file = new File(rootDir.getAbsolutePath(), "gradle.properties")
    properties.load(file.newDataInputStream())
    String path = file.getAbsolutePath()
    println "path:$path"

    def values = [
            "com.xx.1",
            "com.xx.2",
            "com.xx.3"
    ];

    values.each {
        println "value: $it"
    }

    String devModel = properties.getProperty("DEV_MODEL")
    println "MODEL:$devModel"
    println "init()"
}

project.tasks.all{
    Task t = it
    it.taskDependencies.any{
        print("$t.name dependsOn[")
        it.getDependencies(t).findAll() {
            print(it.getPath())
        }
        print ']'
        println ''
    }
}


task callSuccess(dependsOn: ":app:assembleRelease")<<{
    println('build apk success')
}

task testA << {
    init()
//    println gradle.DEV_MODEL
}

